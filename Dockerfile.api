# Multi-stage Dockerfile for API Server
FROM node:18-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    dumb-init

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Development stage
FROM base AS development
RUN npm ci
COPY src/ ./src/
EXPOSE 3000 9229
CMD ["npm", "run", "dev"]

# Build stage
FROM base AS builder
RUN npm ci --only=production
COPY src/ ./src/
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodewatch -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=nodewatch:nodejs /app/dist ./dist
COPY --from=builder --chown=nodewatch:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodewatch:nodejs /app/package.json ./

# Create necessary directories
RUN mkdir -p /app/cache /app/logs && \
    chown -R nodewatch:nodejs /app/cache /app/logs

# Switch to non-root user
USER nodewatch

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]