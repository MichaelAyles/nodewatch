# Multi-stage Dockerfile for Analysis Workers
FROM node:18-alpine AS base

# Install system dependencies including Docker CLI
RUN apk add --no-cache \
    curl \
    ca-certificates \
    dumb-init \
    docker-cli \
    git

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Development stage
FROM base AS development
RUN npm ci
COPY src/ ./src/
CMD ["npm", "run", "worker:dev"]

# Build stage
FROM base AS builder
RUN npm ci --only=production
COPY src/ ./src/
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    dumb-init \
    docker-cli \
    git

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodewatch -u 1001

# Add nodewatch user to docker group (for Docker socket access)
RUN addgroup -g 999 docker && \
    adduser nodewatch docker

WORKDIR /app

# Copy built application
COPY --from=builder --chown=nodewatch:nodejs /app/dist ./dist
COPY --from=builder --chown=nodewatch:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodewatch:nodejs /app/package.json ./

# Create necessary directories
RUN mkdir -p /app/cache /app/packages /app/logs && \
    chown -R nodewatch:nodejs /app/cache /app/packages /app/logs

# Switch to non-root user
USER nodewatch

# Health check for worker
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "console.log('Worker healthy'); process.exit(0)" || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/worker.js"]